// <auto-generated />
using System;
using DatabasePractice.DbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DatabasePractice.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250526131019_migr")]
    partial class migr
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DatabasePractice.Models.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("ID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("ДатаРождения")
                        .HasColumnType("date")
                        .HasColumnName("Дата рождения");

                    b.Property<string>("Имя")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Фамилия")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id")
                        .HasName("Clients_pkey");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("DatabasePractice.Models.GetAvgCheck", b =>
                {
                    b.Property<long>("Количество")
                        .HasColumnType("bigint")
                        .HasColumnName("Количество");

                    b.Property<decimal>("СреднийЧек")
                        .HasColumnType("numeric")
                        .HasColumnName("Средний Чек");

                    b.Property<decimal>("Час")
                        .HasColumnType("numeric")
                        .HasColumnName("Час");

                    b.ToTable("GetAvgCheck");
                });

            modelBuilder.Entity("DatabasePractice.Models.GetPurchasesOfBirthday", b =>
                {
                    b.Property<int>("ID")
                        .HasColumnType("integer")
                        .HasColumnName("ID");

                    b.Property<string>("Имя")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Имя");

                    b.Property<decimal>("ОбщаяСумма")
                        .HasColumnType("numeric")
                        .HasColumnName("Общая сумма");

                    b.Property<string>("Фамилия")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Фамилия");

                    b.ToTable("GetPurchasesOfBirthday");
                });

            modelBuilder.Entity("DatabasePractice.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("ID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ДатаИВремя")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("Дата и время")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("Клиент")
                        .HasColumnType("integer")
                        .HasColumnName("Клиент");

                    b.Property<string>("Статус")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValueSql("'Не обработан'::text");

                    b.Property<decimal>("Сумма")
                        .HasPrecision(12, 2)
                        .HasColumnType("numeric(12,2)");

                    b.HasKey("Id")
                        .HasName("Orders_pkey");

                    b.HasIndex("Клиент");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("DatabasePractice.Models.Order", b =>
                {
                    b.HasOne("DatabasePractice.Models.Client", "КлиентNavigation")
                        .WithMany()
                        .HasForeignKey("Клиент")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Клиент_fk");

                    b.Navigation("КлиентNavigation");
                });
#pragma warning restore 612, 618
        }
    }
}
